import os
import json
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from openai import OpenAI

# === –ö–æ–Ω—Ñ–∏–≥ / –∫–ª—é—á–∏ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_KEY)

DATA_FILE = Path("data.json")

# === –ë–∞–∑–∞ (JSON) ===
def load_data() -> dict:
    if not DATA_FILE.exists():
        return {}
    try:
        with DATA_FILE.open("r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {}

def save_data(data: dict) -> None:
    with DATA_FILE.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_user(data: dict, user_id: int) -> None:
    uid = str(user_id)
    if uid not in data:
        data[uid] = {"dice": 0, "messages": 0, "chat_mode": False, "quiz": None}
    data[uid].setdefault("chat_mode", False)
    data[uid].setdefault("quiz", None)

# === GPT ===
async def ask_gpt(prompt: str) -> str:
    if not OPENAI_KEY:
        return "‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY –≤ .env"
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=350,
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

# === –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===
QUIZ_QUESTIONS = [
    "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
    "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
    "–ß—Ç–æ —Ç—è–∂–µ–ª–µ–µ: 1 –∫–≥ –≤–∞—Ç—ã –∏–ª–∏ 1 –∫–≥ –∂–µ–ª–µ–∑–∞?"
]

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    uid = str(update.effective_user.id)
    data = load_data()
    ensure_user(data, update.effective_user.id)

    data[uid]["quiz"] = {"q": 0, "score": 0}
    save_data(data)

    msg = f"üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–í–æ–ø—Ä–æ—Å 1: {QUIZ_QUESTIONS[0]}"
    if from_button:
        await update.callback_query.message.reply_text(msg)
    else:
        await update.message.reply_text(msg)

async def on_button_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_quiz(update, context, from_button=True)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data="ROLL_DICE")],
        [InlineKeyboardButton("üìö –ü–æ–º–æ—â—å", callback_data="HELP")],
        [InlineKeyboardButton("üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT", callback_data="GPT_CHAT")],
        [InlineKeyboardButton("üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="QUIZ_START")],
    ]
    return InlineKeyboardMarkup(rows)

def back_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="BACK_TO_MENU")]])

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = user.first_name or "–¥—Ä—É–≥"

    data = load_data()
    ensure_user(data, user.id)
    state = "–≤–∫–ª—é—á—ë–Ω" if data[str(user.id)]["chat_mode"] else "–≤—ã–∫–ª—é—á–µ–Ω"

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
        f"–†–µ–∂–∏–º ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT¬ª —Å–µ–π—á–∞—Å {state}.\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å GPT.",
        reply_markup=main_menu_kb()
    )

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = str(q.from_user.id)

    data = load_data()
    ensure_user(data, q.from_user.id)

    if q.data == "ROLL_DICE":
        import random
        v = random.randint(1, 6)
        data[uid]["dice"] += 1
        save_data(data)
        await q.message.reply_text(f"üé≤ –í—ã–ø–∞–ª–æ: {v}")

    elif q.data == "HELP":
        await q.message.reply_text(
            "–Ø —É–º–µ—é:\n"
            "‚Ä¢ /start ‚Äî –º–µ–Ω—é\n"
            "‚Ä¢ /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ üé≤ –ö—É–±–∏–∫, üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT (–∫–Ω–æ–ø–∫–∏)\n\n"
            "–í —Ä–µ–∂–∏–º–µ ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT¬ª –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT.",
            reply_markup=main_menu_kb()
        )

    elif q.data == "GPT_CHAT":
        data[uid]["chat_mode"] = True
        save_data(data)
        await q.message.reply_text(
            "üß† –†–µ–∂–∏–º ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT¬ª –≤–∫–ª—é—á—ë–Ω.\n"
            "–ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT.\n"
            "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏ ¬´üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª.",
            reply_markup=back_menu_kb()
        )

    elif q.data == "BACK_TO_MENU":
        data[uid]["chat_mode"] = False
        save_data(data)
        await q.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_kb()
        )

    elif q.data == "QUIZ_START":
        await on_button_quiz(update, context)

async def echo_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    uid = str(update.effective_user.id)

    data = load_data()
    ensure_user(data, update.effective_user.id)
    data[uid]["messages"] += 1
    save_data(data)

    if text.startswith("/"):
        return

    if data[uid]["quiz"] is not None:
        q_index = data[uid]["quiz"]["q"]
        score = data[uid]["quiz"]["score"]

        question = QUIZ_QUESTIONS[q_index]
        check_prompt = (
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {text}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
        )
        verdict = await ask_gpt(check_prompt)

        if verdict.lower().startswith("–¥–∞"):
            score += 1
            await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")

        q_index += 1
        if q_index < len(QUIZ_QUESTIONS):
            data[uid]["quiz"] = {"q": q_index, "score": score}
            save_data(data)
            await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {q_index+1}: {QUIZ_QUESTIONS[q_index]}")
        else:
            await update.message.reply_text(f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–≤–æ–∏ –±–∞–ª–ª—ã: {score}/{len(QUIZ_QUESTIONS)}")
            data[uid]["quiz"] = None
            save_data(data)
        return

    if data[uid]["chat_mode"]:
        answer = await ask_gpt(text)
        await update.message.reply_text(answer, reply_markup=back_menu_kb())
        return

    await update.message.reply_text(f'–¢—ã –Ω–∞–ø–∏—Å–∞–ª: "{text}"', reply_markup=main_menu_kb())

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    data = load_data()
    ensure_user(data, update.effective_user.id)
    u = data[uid]
    await update.message.reply_text(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Äî –∫—É–±–∏–∫: {u['dice']}\n‚Äî —Å–æ–æ–±—â–µ–Ω–∏–π: {u['messages']}"
    )

async def cmd_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    data = load_data()
    data[uid] = {"dice": 0, "messages": 0, "chat_mode": False, "quiz": None}
    save_data(data)
    await update.message.reply_text("‚ôªÔ∏è –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=main_menu_kb())

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ—Ç BOT_TOKEN –≤ .env")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_text))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: —Ä–µ–∂–∏–º ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT¬ª –¥–æ—Å—Ç—É–ø–µ–Ω –∫–Ω–æ–ø–∫–æ–π")
    app.run_polling()

if __name__ == "__main__":
    main()
   
